var log = require("log"); 
log.setLevel("info");

var devices = require("device");

var _ = require("modules/underscore/underscore.js")._;

var deviceManager = require("app/entities/deviceManager");
var deviceEvaluator = require("app/entities/deviceEvaluator");
var devicePublisher = require("app/entities/devicePublisher");

var config = require("app/config/config");

var deviceConfig = null;
var data = {};
var deviceId = null;
var dataMapping = {};

if(request.user.id == "myDevice") {
    var body = request.body ? request.body : request.rawBody;
  	var inputData = typeof(body) == "string" ? JSON.parse(body) : body;
   
    _.some(config.availableDeviceTypes, function(entry) {
        	deviceConfig = entry;
        	var deviceMapper = require(entry.mapper);
         	data = deviceMapper.mapIt(inputData); 
            data = _.omit(data, function(value, key, object) {
  				return _.isUndefined(value);
			});
    		return (_.isEmpty(data) == false);
    });
    
    deviceId = data.id; //It should come from the message
} else {
    return;
}

log.info("[app/api/subscription/subscriber] received the following payload \n" + JSON.stringify(data));

if(!_.isEmpty(data)) { 
    try {
        var deviceDefinition = deviceManager.getDeviceDefinition(deviceId);
        log.info("Existing Device Definition: "+JSON.stringify(deviceDefinition))
        if(deviceDefinition == null) {
            var deviceDefinition = {};
            deviceDefinition = deviceConfig.deviceDataTopUp;
            deviceDefinition.id = deviceDefinition.name = deviceId;
            deviceDefinition = deviceManager.buildDeviceDefinitionDocument(deviceDefinition);
            //Save device definition
            log.info("[app/api/subscription/subscriber] Creating Device Definition: "+JSON.stringify(deviceDefinition))
            var result = deviceManager.saveDeviceDefinition(deviceDefinition);
        }
        var entry = {};
        entry = deviceManager.buildDeviceEventDocument(deviceDefinition, data);
        log.info("[app/api/subscription/subscriber] Processing Event Entry: " + JSON.stringify(entry))	
        return processEntry(entry);
    }catch(exception) {
        log.info("Exception: "+JSON.stringify(exception))
        return exception;    
    }
} else {
    log.info("[app/api/subscription/subscriber] No transformation found for data");
    return;
}


function processEntry(entry) {
    deviceEvaluator.evaluateDevice(entry)
    deviceManager.saveDeviceEvent(entry);
    devicePublisher.publishDevice(entry);
}



