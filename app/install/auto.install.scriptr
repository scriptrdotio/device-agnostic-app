var responseObject = {};
var channels = require("channel");
var devices = require("device");
var groups = require("group");


var setupKey = (request.parameters && request.parameters["setupKey"]) ? request.parameters["setupKey"] : "B-L072Z-LRWAN1"//"B-L475E-IOT01A";//"nebula-2.0";

/** Setup account default domain if none is set **/
var subdomain = request.account.accountKey;
var params = {
    "apsdb.name": subdomain
}

var step = apsdb.callApi("SaveSubdomain", params, null); 
responseObject["subdomainCreation_"+subdomain] = JSON.stringify(step)


/** Create a group editor that allows its users to access the scriptr ide plugins, ex: decision table **/
var editorGroup = "editor";
var step2 = groups.create(editorGroup);
responseObject["groupCreation_"+editorGroup] = JSON.stringify(step2);



/** Create Anonymous publish channel used to receive requests from browser **/
var channelsList =  ["requestChannel", "responseChannel"];
var options = {
  "subscribeACL": "anonymous",
  "publishACL": "anonymous"
}

channelsList.forEach(function(channel) {
   var step5 = channels.create(channel, options);
   responseObject["channelCreation_"+channel] = JSON.stringify(step5)
});


var devicesList = [
    {//Device used to login to iot app
        "id":"demo",
        "password" : "demo",
        "name" : "demo",
        "groups": ["editor"]
    },
    { //This device is used by to authenticate the mqtt bridge
        "id":"myDevice",
        "password" : "demo",
        "name" : "myDevice"
    }
];

devicesList.forEach(function(params) {
   	var step6= devices.save(params);
    responseObject["deviceCreation_"+params.id] = JSON.stringify(step6);

    var step7= devices.generateToken(params.id);
    responseObject["deviceToken_"+params.id] = JSON.stringify(step7);
});


//Create the channel used by the mqtt bridge between scriptr and ibm bluemix
var channelsList =  ["deviceDigest"];
var params = {"name" : "deviceDigest", "subscribeACL": ["myDevice"],"publishACL":  ["myDevice"]};
var step6 = apsdb.callApi("SaveChannel", params , null )
responseObject["channelCreation_"+params.name] = JSON.stringify(step6);

//Setup the mqtt connection instance (ibm free tier)
var params = {
    'name': 'deviceDigestEndpoint',
    'protocol': 'mqtt',
    'url':'quickstart.messaging.internetofthings.ibmcloud.com',
    'topic': 'iot-2/type/deviceDigest/id/deviceDigest'+request.account.accountKey+'/evt/+/fmt/json',
    'clientId': 'a:quickstart:scriptr-'+request.account.accountKey
    
}
var response = apsdb.callApi("SaveExternalEndpointConfiguration", params, null);
responseObject["createMqttExternalEndPoint"] = JSON.stringify(response);


//Link the bridge to the channel for publishing messages
//The free trial if not activated yet can be activated by going to channels and clicking on bridges under any channel and clicking on free trial button
var params = {
    "channel": "deviceDigest",
    "externalEndpointConfiguration":"deviceDigestEndpoint",
    "auth_token": devices.get("myDevice").result["auth_token"]
}
var response = apsdb.callApi("AddBridge", params, null);
responseObject["AddBridge"] = JSON.stringify(response);

var pubsub = require("pubsub");
var topic = pubsub.getInstance("deviceDigest");
var response = topic.subscribe("app/api/subscription/subscriber", "script");
responseObject["subscribeScriptToChannel"] = JSON.stringify(response);

//Set a scheduler to cleanup events
var scheduleCleanup = schedule("app/cleanup/devicesEvents", "5 * * * ?");
responseObject["scheduleCleanup"] = JSON.stringify(scheduleCleanup);


var params = { 
    "apsdb.name": "app/config/"+setupKey+"/constants.js"
}
var installConfigurationFe = apsdb.callApi("GetFileContent", params, null);
responseObject["GetConfigurationFe"] = JSON.stringify(installConfigurationFe);

if(installConfigurationFe.metadata.status == "success") {
    var params = { 
    	"apsdb.name": "app/view/javascript/constants.js",
    	"apsdb.content": JSON.stringify(installConfigurationFe.result)
	}	
    var installConfigurationFe = apsdb.callApi("SaveFile", params, null);
    responseObject["setupConfigurationFe"] = JSON.stringify(installConfigurationFe);
}


var params = { 
    "apsdb.name": "app/config/"+setupKey+"/dataTransformation"
}
var installTransformation = apsdb.callApi("GetFileContent", params, null);
responseObject["getTransformation"] = JSON.stringify(installTransformation.metadata);

if(installTransformation.metadata.status == "success") {
    var params = { 
    	"apsdb.name": "app/config/dataTransformation",
    	"apsdb.content": JSON.stringify(installTransformation.result)
	}	
    var installTransformation = apsdb.callApi("SaveFile", params, null);
    responseObject["setupTransformation"] = JSON.stringify(installTransformation.metadata);
}

var params = { 
    "apsdb.name": "app/config/"+setupKey+"/config"
}
var installConfigurationBe = apsdb.callApi("GetFileContent", params, null);
responseObject["getConfigurationBe"] = JSON.stringify(installConfigurationBe.metadata);

if(installConfigurationBe.metadata.status == "success") {
    var params = { 
    	"apsdb.name": "app/config/config",
    	"apsdb.content": JSON.stringify(installConfigurationBe.result)
	}	
    var installConfigurationBe = apsdb.callApi("SaveFile", params, null);
    responseObject["setupConfigurationBe"] = JSON.stringify(installConfigurationBe.metadata);
}


return responseObject;
